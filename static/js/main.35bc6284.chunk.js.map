{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","_this2","this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Styles","SmallBtn","color","fontSize","margin","padding","border","borderRadius","halfBtn","width","display","numBtn","props","react_default","a","createElement","className","type","value","num","onClick","setNum","style","operaBtn","op","setOp","clrBtn","colSpan","clr","objectSpread","equBtn","equ","calculate","disabled","txt","Calculator","result","operation","state","parseFloat","txt2","setState","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35bc6284.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './assets/bootstrap.min.css';\n\n// create app class\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      txt : '', txt2 : '', operation: '',\n    }\n  }\n\n  // elemets stylesheet\n  Styles = {\n      SmallBtn: {\n      color: \"white\",\n      fontSize: `1em`,\n      margin: `5pt`,\n      padding: `0.25em 1em`,\n      border: `2px solid palevioletred`,\n      borderRadius: `3px`,\n    },\n    halfBtn: {\n      width: '100%',\n      fontSize: `1em`,\n      margin: `5pt`,\n      padding: `0.25em 1em`,\n      border: `2px solid palevioletred`,\n      borderRadius: `3px`,\n    },\n    display: {\n      width: '100%',\n      fontSize: `1em`,\n      margin: `5pt`,\n      padding: `0.25em 1em`,\n      border: `2px solid palevioletred`,\n      borderRadius: `3px`,\n    }\n  }\n\n  // number button component\n  numBtn = props => (\n    <td>\n      <input\n        className=\"btn btn-primary\" type=\"button\" value={props.num}\n        onClick={() => this.setNum(props.num)} style={this.Styles.SmallBtn}\n      />\n    </td>\n  )\n\n  // operator button component\n  operaBtn = props => (\n    <td>\n      <input\n        className=\"btn btn-warning\" type=\"button\" value={props.op}\n        onClick={() => this.setOp(props.op)} style={this.Styles.SmallBtn}\n      />\n    </td>\n  )\n\n  // clear button component\n  clrBtn = props => (\n    <td colSpan={2} className=\"col-6\" >\n      <input\n        className=\"btn btn-info\" type=\"button\" value={props.op}\n        onClick={() => this.clr()} style={{...this.Styles, ...this.Styles.halfBtn}}\n      />\n    </td>\n  )\n\n  // equals button component\n  equBtn = props => (\n    <td colSpan={2} className=\"col-6\" >\n      <input\n        className=\"btn btn-success\" type=\"button\" value={props.equ}\n        onClick={() => this.calculate()} style={this.Styles.halfBtn}\n      />\n    </td>\n  )\n\n  // display input component\n  display = props => (\n    <tr>\n      <td colSpan=\"4\" >\n        <input\n          className=\"text-large form-control\" disabled type=\"text\" value={props.txt}\n          style={this.Styles.display}\n        />\n      </td>\n    </tr>\n  )\n\n  // calculator component\n  Calculator = props =>  (\n    <div>\n    <this.display txt={props.txt} />\n    <tr>\n      <this.numBtn num={1} />\n      <this.numBtn num={2} />\n      <this.numBtn num={3} />\n      <this.operaBtn op={'+'} />\n    </tr>\n    <tr>\n      <this.numBtn num={4} />\n      <this.numBtn num={5} />\n      <this.numBtn num={6} />\n      <this.operaBtn op={'-'} />\n    </tr>\n    <tr>\n      <this.numBtn num={7} />\n      <this.numBtn num={8} />\n      <this.numBtn num={9} />\n      <this.operaBtn op={'*'} />\n    </tr>\n    <tr>\n      <this.numBtn num={'.'} />\n      <this.numBtn num={0} />\n      <this.operaBtn op={'%'} />\n      <this.operaBtn op={'/'} />\n    </tr>\n    <tr>\n      <this.clrBtn op={'clr'} />\n      <this.equBtn equ={'='} />\n    </tr>\n    </div>\n  )\n\n  // pass clicked number to display\n  setNum(num){\n    this.setState({\n      txt: this.state.txt+num,\n    })\n  }\n\n  // set the operation state\n  setOp(op){\n    this.setState({\n      txt2: this.state.txt, txt: '', operation: op,\n    })\n  }\n\n  // clear calculator states\n  clr(){\n    this.setState({\n      txt2: '', txt: '', operation: '',\n    })\n  }\n\n  // calculate based on the calculator state\n  calculate = () => {\n    let result = ''\n    const operation = this.state.operation\n    const txt = parseFloat(this.state.txt)\n    const txt2 = parseFloat(this.state.txt2)\n    switch (operation) {\n      case '+':\n        result = (txt2 + txt)\n        break;\n      case '-':\n        result = (txt2 - txt)\n        break;\n      case '*':\n        result = (txt2 * txt)\n        break;\n      case '/':\n        result = (txt2 / txt)\n        break;\n      case '%':\n        result = (txt2 % txt)\n        break;\n      default:\n    }\n    this.setState({\n      txt: result,\n    })\n  }\n\n  // calculator rendering\n  render(){\n    return (\n      <div class=\"well container\">\n        <h3 class=\"text-center\">\n    \t\t\t A web based calculator built with reactjs. it performs arithmetic operations on numbers.\n    \t\t\t  It can do only addition, subtraction, multiplication, division, and modulous.\n    \t \t</h3>\n        <div class=\"bg-info centered\">\n          <div className=\"\">\n            <table>\n              <this.Calculator  txt={this.state.txt}/>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}